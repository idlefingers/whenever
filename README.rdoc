== Introduction

Whenever is a Ruby gem that provides a clear syntax for defining cron jobs. It outputs valid cron syntax and can even write your crontab file for you. It is designed to work well with Rails applications and can be deployed with Capistrano. Whenever works fine independently as well.

Ryan Bates created a great Railscast about Whenever: http://railscasts.com/episodes/164-cron-in-ruby

Discussion: http://groups.google.com/group/whenever-gem

== Installation
  
$ sudo gem install whenever

== Getting started

  $ cd /my/rails/app
  $ wheneverize .

This will create an initial "config/schedule.rb" file you.

== Example schedule.rb file
  
  every 3.hours do
    runner "MyModel.some_process"       
    rake "my:rake:task"                 
    command "/usr/bin/my_great_command"
  end

  every 1.day, :at => '4:30 am' do 
    runner "MyModel.task_to_run_at_four_thirty_in_the_morning"
  end

  every :hour do # Many shortcuts available: :hour, :day, :month, :year, :reboot
    runner "SomeModel.ladeeda"
  end

  every :sunday, :at => '12pm' do # Use any day of the week or :weekend, :weekday 
    runner "Task.do_something_great"
  end

More examples on the wiki: http://wiki.github.com/javan/whenever/instructions-and-examples

== Cron output

  $ cd /my/rails/app
  $ whenever

And you'll see your schedule.rb converted to cron sytax. Note: running `whenever' with no options does not display your current crontab file, it simply shows you the output of converting your schedule.rb file.

== Capistrano integration

In your "config/deploy.rb" file do something like:

  after "deploy:symlink", "deploy:update_crontab"

  namespace :deploy do
    desc "Update the crontab file"
    task :update_crontab, :roles => :db do
      run "cd #{release_path} && whenever --update-crontab #{application}"
    end
  end

This will update your crontab file, leaving any existing entries unharmed. When using the <code>--update-crontab</code> option, Whenever will only update the entries in your crontab file related to the current schedule.rb file. You can replace the <code>#{application}</code> with any identifying string you'd like. You can have any number of apps deploy to the same crontab file peacefully given they each use a different identifier.

If you wish to simply overwrite your crontab file each time you deploy, use the <code>--write-crontab</code> option. This is ideal if you are only working with one app and every crontab entry is contained in a single schedule.rb file.

By mixing and matching the <code>--load-file</code> and <code>--user</code> options with your various :roles in Capistrano it is entirely possible to deploy different crontab schedules under different users to all your various servers. Get creative!

If you want to override a variable (like your environment) at the time of deployment you can do so with the <code>--set</code> option: http://wiki.github.com/javan/whenever/setting-variables-on-the-fly

== Defining custom job types

You can define custom job types in your schedule file:

  job_type :rails3_runner do |job|
    job.command = "rails runner"
    job.settings = { :use_bundler => true }
  end
  
  every 1.day, :at => "2am" do
    rails3_runner "MyModel.do_something_amazing"
  end
  
This would create a job like: <tt>cd /path/to/app && bundle exec rails runner "MyModel.do_something_amazing"</tt>

By defining jobs like this, you can also make reusable system commands such as:

  job_type :my_great_command do |job|
    job.command = "/usr/bin/my_great_command"
    job.settings = { :environment => false, :path => false, :quote_task => false }
  end
  
  every 3.days do
    my_great_command "arg1 arg2 'arg3'"
  end
  
This would create a job like: <tt>/usr/bin/my_great_command arg1 arg2 'arg3'</tt>

The settings available when creating job types include:

environment:: Set to <tt>false</tt> to stop the command trying to specify the environment at all. Set to a string or symbol to set the environment to that.
path:: Set to <tt>false</tt> to stop the command running cd before the task. Set to a string or symbol to set the path the cd to.
use_bundler:: If set to <tt>true</tt>, the task will be prefixed by <tt>bundle exec</tt>

== Credit

Whenever was created for use at Inkling (http://inklingmarkets.com) where I work. Their take on it: http://blog.inklingmarkets.com/2009/02/whenever-easy-way-to-do-cron-jobs-from.html

While building Whenever, I learned a lot by digging through the source code of Capistrano - http://github.com/jamis/capistrano

== Discussion / Feedback / Issues / Bugs

For general discussion and questions, please use the google group: http://groups.google.com/group/whenever-gem

If you've found a genuine bug or issue, please use the Issues section on github: http://github.com/javan/whenever/issues

== License

Copyright (c) 2009+ Javan Makhmali

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
